DDD
-In the composer.json file
       "autoload": {
               "psr-4": {
                  "Domains\\": "src/Domains"
-Change version of php ->"php": "^8.3",
-Create some directories with the
        Domains
            Fulfilment ,
            Customer ,create folder Models
            Catalog (Business Logic)
-Move the User Class into Customer/Models
   -Open the user class file
   -Select user ->right click->Move Class
-In User Migration
   return  new class
-With Models folder create another folder called Concern ->create trait  HasUuid

CREATE LOCATIONS
   php artisan make:model Location -mf

In realty though a user will have multiple shipping locations :office,home etc

- Housing keeping in Factories

composer require juststeveking/laravel-transporter
https://postcodes.io/
https://github.com/JustSteveKing/LaravelPostcodes

-Created STUB
-php artisan stub:publish
-Avoid confusion later

CREATE ADDRESS
  php artisan make:model Address  -mf

-Moved the HasUuid tO Shared/Models/Concerns

RouteServiceProvider
-Declare typescript at the top of the file declare(strict_types=1);
-Change the route  for api
     Route::prefix('api/v1')
             ->as('api:v1:')
             ->middleware('api')
            // ->namespace($this->namespace)
             ->group(base_path('routes/api/v1.php'));
-Routes->create a directory call api
-Move the api file into it and rename to v1.php
-‚ùØ php artisan route:list --columns=uri,name,method

CONTROLLERS
php artisan make:controller Api\\V1\\Products\\IndexController --invokable
php artisan make:controller Api\\V1\\Products\\ShowController --invokable
php artisan make:controller Web\\Pages\\HomePageCOntroller --invokable
php artisan make:controller Admin\\Users\\IndexController --invokable
 php artisan make:controller Web\\Pages\\HomePageController --invokable

EPISODE 2
   CREATE MODEL , MIGRATION & FACTORY
         php artisan make:model Category -mf
         php artisan make:model Range  -mf
-Add attributes to the migration
     Category and Range
-Move all above models to Domains\Catalog\Models
-Add the Mass Assigment  to all model
-add use HasKey; for both
 Package  for key
    composer require juststeveking/laravel-key-factory
     php artisan vendor:publish select 15 key-factory-config
NB any public will have key but any internal will have Uuuid(not friendly in web interface)
-Add faker in both models
-php migrate

- Add this static method to every models for factory
 protected static function newFactory() :Factory
    {
        return  CategoryFactory::new();
        //return  new AddressFactory();
    }
php artisan migrate:fresh --seed

Product:
  attributes:
    id: int
    key: string
    name: string
    description: medium text
    cost: int (pence/cent/etc)
    retail: int
    active: boolean
    vat: boolean (do we need to charge VAT for this product)

  relationships:
    category: belongsTo
    ranges: belongsToMany
    variants: hasMany  // color, size ,

CREATE  MODEL MIGRATION AND FACTORY  PRODUCT
  php artisan make:model Product  -mf
-Create all the attributes for pruducts table
-Move to the Domains\Catalog\Models
-Add all Mass Assigment to both models
-Add this static method to both models
   protected static function newFactory() :Factory
       {
           return  CategoryFactory::new();
           //return  new AddressFactory();
       }
-Create a stub into model to resolve the issue above
-We made some change by alter the users migration
   php artisan make:migration alter_table_users_add_billing_and_shipping_constraint --table=users

   CREATE OUR FACTORY PRODUCTS
-add faker in the product factory
-create shop file in config to control vat
-Add to env.php and env.php.example
-Create /Add ProductFactor to the databaseseeder

RELATIONSHIP OF MODELS
- Add some relationship to both models Category Product Range

CREATE MODELS BUILDERS
-Create a directory Builders
-Inside the  Domains\Catalog\Models\Builder
-Create three Builders
      CategoryBuilder -extend to Illuminate\Database\Eloquent\Builder
      RangeBuilder    -extend to Illuminate\Database\Eloquent\Builder
      ProductBuilder  -extend to Illuminate\Database\Eloquent\Builder

- To each class we  write the function newEloquentBuilder
      what the purpose of Builder is to use the common thing they share live active attributes

-Create builders folder in src/Domains/Shared/Models/Builders
-Within the Builders folder create another folder called Shared
- Shared/Models/Builders/Shared
-Create a new traits  (HasActiveScope)
-Select template trait
-Declare : declare(strict_types=1);
-withing the trait write to function for "active"

-Go to CategoryBuilder as use traits
       use HasActiveScope;
-Go to ProductBuilder as use traits
       use HasActiveScope;
-Go to RangeBuilder as use traits
       use HasActiveScope;

git add .

This scope will help top share among our buildeers

VARIANT MODULE
MAKE MODEL AND MIGRATION FOR VARIANT
-Create Variant Model & Migration
   php artisan make:model Variant -mf
-Do dump autoload composer dump-autoload
-Create the  attributes migration for variant
-Move model Variant to Domains
    Domains\Catalog\Models
-Add Mass Assigment and casts

VARIANT BUILDER
 -Create a file for Variant Builders
 -Extend Illuminate\Database\Eloquent\Builder
 - Add use HasActiveScope;
- add some scope within the Variant Builders
-Add attribute to the VariantFactory
-Add the Variant to the database seeder






EVENT SOURCE VIDEO
https://www.youtube.com/watch?v=aoaBU__dfDw
https://www.youtube.com/watch?v=aoaBU__dfDw
https://en.wikipedia.org/wiki/Event_storming#:~:text=Event%20storming%20is%20a%20workshop,notes%20on%20a%20wide%20wall

NOTION - BUILDING ONLINE STORE
https://juststeveking.notion.site/Let-s-build-an-online-store-cfdc33868f9e46b0a11b86bfa76092a2
