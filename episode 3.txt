CARTS AND ORDERS
 -Create a cart and covert into order
 -Is very simple ,it holds the object
 -is the
CREATE  CART MODEL
 php artisan make:model Cart  -mf

MOVE THE CART MODEL
- Move it in  Domains\Customers\Models

ADD ATTRIBUTE IN MIGRATIONS TABLE
-add all the relevant attribute into Cart Migration table as shown on design
-we might use event sourcing

MASS ASSIGMENT CART MODELS
- Add the HasKey traits
-Add the $fillable attributes

CREATE RELATIONSHIP
-add some relationship into cart based to user who add the product to the cart
- add the inverse to the USER model as well


CREATE CART FACTORY
-Add the  faker  in the CartFactory
-In status attribute ,i am going to use php 8.1 enum
   https://stitcher.io/blog/php-enums
   https://github.com/spatie/enum
   https://spatie.be/docs/enum/v3/installation-and-setup
   composer require spatie/laravel-enum
   php artisan vendor:publish --provider="Spatie\Enum\Laravel\EnumServiceProvider" --tag="translation"

-He decided to use  spatie enum package
   composer require spatie/enum
   composer update
-Create States Directory in src/Domains/Customer/States
-Create Statuses Directory in src/Domains/Customer/States/Statuses
-Create CartStatus Class within Statuses folder
- extends: Spatie\Enum\Laravel\Enum
-Read te documentation  https://github.com/spatie/laravel-enum
-Add thee enum method
   /**
    * @method static self pending()
    * @method static self complete()
    * @method static self abandoned()

    */
-Add the casts protected in cart model
     protected $casts = [
            'status' => CartStatus::class,
        ];

-how to implement the cases
  php artisan tinker
   >>> use Domains\Customer\States\Statuses\CartStatus
   >>> CartStatus::cases()
   => [
        Domains\Customer\States\Statuses\CartStatus {#3505},
        Domains\Customer\States\Statuses\CartStatus {#3509},
        Domains\Customer\States\Statuses\CartStatus {#3503},
      ]
   >>> collect(CartStatus::cases())->each(fn($case) => dump($case))
  >>> collect(CartStatus::cases())->each(fn($case) => dump($case->value))

   -The above tinker gives  us the arrays results
   -we can pass to the CartFactor in status attributes
Add the Cart Factor in the DatabaseSeeder
-Let us use final in CartStatus class ,can not be extended

CREATE  A CARTITEM MODEL $ MIGRATIONS
-create  model and migration for cartItem
  ❯ php artisan make:model CartItem  -mf
-Add some attributes in cartItems migration table


MOVE THE CARTITEM MODEL
-Move CartItem model to the Domains\Customer\Models

ADD MASS ASSIGMENT CARTITEM MODEL
 -Add the fillable attributes to protect mass assigment

ADD RELATIONSHIP IN CARTITEM MODEL
-Add the relationship for cart_id in CartItem Model
-Add the inverse relationship in Cart Model
-Add morphTo relationship in CartItem model
  https://laravel.com/docs/8.x/eloquent-relationships#polymorphic-relationships
-Add also to the AppServiceProvider as doc say Custom Polymorphic Types AT boot() method
    Relation::enforceMorphMap([
               'variant' => Variant::class
           ]);
       }

-Add relationship to the Variant Model  purchases()

CREATE AN ORDER  AND ORDERLINE
-We want to convert a cart to an order

CREATE MIGRATIONS , MODEL & FACTORY FOR BOTH
-Create the migration for Order
     php artisan make:model Order  -mf
-Create the migration for OrderLine
     php artisan make:model OrderLine  -mf
MOVE THE MODEL INTO DOMAINS
 -Move the Order to the domain
   Domains\Customer\Models
-Move the OrderLine to the Domains

ORDER MIGRATIONS TABLE
-Add so attributes to the order table
-we dont have shipping.billing table ,but we're point out to location

ADD MASS ASSIGMENT TO ORDER
-Add the mass assigment to orders and cast

ADD RELATIONSHIP TOP ORDER MODE
-Add user() relationship to order model
-Add an inverse relationship to User Model

CREATE ORDERFACTORY
-create faker for orderfactory class
-Add all relevant attribute based on migrations table
-On state attributes ,please create a file orderStatus.php and pass the value method
-in state add bothify
   https://fakerphp.github.io/formatters/numbers-and-strings/#bothify
CREATE ORDERSTATUS file
-Create the orderStatus file in src/Domains/Customer/States/Statuses/OrderStatus.php
-Will be similar to CartStatus

ADD TO DATABASE SEEDER
-Add a new OrderSeeder in database seeder

CREATE ORDERLINE MIGRATION
-to take the snapshot of product
-Add some attribute to OrderLine Table

ADD MASS ASSIGMENT TO ORDERLINE MODEL and CASTS
 -Add the attribute  related to this model
-we don't need the casts

ADD THE RELATIONSHIP TO ORDERLINE MODEL
-add the relationship order() in orderLine Model
-add the relationship purchasable() () in orderLine Model
-add the relationship to the Order Model lineitems())
-add the relationship to the OrderItem Model lineitems())
-add the relationship to the Variant Model orders()

ORDERLINE FACTORY
-Create factory for OrderLine  to generate the faker

ADD ORDERLINE FACTORY DATABASE SEEDER
-add the orderLine factory to the database seeder

Reference
  https://juststeveking.notion.site/Episode-3-cd2b6e0a6c1449ceac41b18fa8a42f8a
I'm always in doubt better to control the items per session or directly in the database
  Based to Steve he likes to put into database ,and work around with business logic
Can you explain the business logic behind why the total would be kept in the DB?
  -He is going the event sourcing





NG PHP Faker - google
https://marmelab.com/blog/2020/10/21/sunsetting-faker.html
