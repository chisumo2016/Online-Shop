Episode 5
https://github.com/JustSteveKing/shop
https://juststeveking.notion.site/Episode-5-cde6eb428e554f4fbd27cee2f91ab5c0
In this episode we are going to take a Test Driven Development approach to how our Cart will work, using pestPHP
https://github.com/brendt/phpstorm-photon-them
https://github.com/timacdonald/json-api
https://github.com/JustSteveKing/shop

-Create new Feature Cart
   * git checkout -b feature/cart
      * Switched to a new branch 'feature/cart'
-Start with Testing PART
  -create a CartTest File in Feature
  -Create a web api route carts
  -composer  update
 API END POINT

 /*POST carts/1234/products*/
 /*PATCH carts/1234/products/abcd*/
 /*DELETE carts/1234/products/acbd*/
 -Install the Sanctum API
 https://laravel.com/docs/8.x/sanctum#installation
   -composer require laravel/sanctum
   *php artisan route:list --columns=uri,name,method

-create store controller
  php artisan make:controller Api\\V1\\Carts\\StoreController --invokable
-Create a folder (Actions)  src/Domains/Customer/Actions
-create a  CreateCart class inside actions
-How can handle? Create a Factories Directory in Customers
-Create a file CartFactory class
-Create a CartValueObject
-Make a Cart Resources
    php artisan make:resource Api\\V1\\CartResource
NB: https://github.com/timacdonald/json-api
- Add the column into cart migration
    $table->uuid('uuid')->unique();
-add the method getRouteKeyName in trait HasUUID
-Refresh and migrate
  php artisan migrate:fresh  --seed
-Create a CartItemResource
    php artisan make:resource Api\\V1\\CartItemResource

    NB: TESTING https://laravel.com/docs/8.x/http-tests#fluent-json-testing
-we need to use prunable to our cart
  https://laravel.com/docs/8.x/eloquent#pruning-models
-Create a IndexController
    php artisan make:controller Api\\V1\\Carts\\IndexController --invokable

nb: Laravel follow PSR 7 / PSR 17
    https://github.com/Nyholm/psr7

-Adding the product into cart-create a controller
    php artisan make:controller Api\\V1\\Carts\\Products\\StoreController --invokable
-Add the validation
   php artisan make:request  Api\\V1\\Carts\\ProductRequest
-Create a AddProductToCart into Actions folder
-Create a Factory - CartItemFactory
-Create CartItemValue Object  CartItemValueObject
-Pass param into storeController
-change the migration for cartItem to use uuid instead of key
-php artisan migrate:fresh  --seed
-Add some functionality CartItemResource
-Test has passed ,we need to work on aggregates
    app/Http/Controllers/Api/V1/Carts/Products/StoreController.php
-Database Testing
   dd(Spatie\EventSourcing\StoredEvents\Models\EloquentStoredEvent::query()->get());



T-KEY -template in php 8 static analysis
  How it works
   1 uri: route('api:v1:carts:products:store', $cart->uuid),
   2:






Ask rafflebird API
